// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

enum Memberships {
  FREE
  Basic
  Premium
  Enterprise
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?   
  image         String?
  password      String?
  role          UserRole    @default(USER)
  accounts      Account[]
  company       Company[]
  Membership    Membership?
  createdAt     DateTime    @default(now())
  updateAt      DateTime    @updatedAt

  @@map("users")
}

model Membership {
  id             String      @id @default(cuid())
  membershipType Memberships @default(FREE)
  userId         String      @unique
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  user           User        @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Company {
  id          String     @id @default(cuid())
  name        String
  description String
  logo        String?
  country     String
  userId      String     @unique
  user        User       @relation(fields: [userId], references: [id])
  category    Category[]
  productId   Products[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("company")
}

model Products {
  id          String   @id @default(cuid())
  name        String
  description String
  imageLink   String[]
  singlePrice Float
  loatPrice   Float
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("products")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Company   Company @relation(fields: [companyId], references: [id])
  companyId String
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
